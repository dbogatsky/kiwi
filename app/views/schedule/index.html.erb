<% content_for :pageheader do %>
  <h2><i class="fa fa-home"></i> Schedule</h2>
<% end %>
<div class="row">
  <div class="col-md-4">
    <div class="panel panel-default panel-alt">
      <div class="media padding10">
        <a class="pull-left">
          <% if current_user.avatar_url.eql? "/avatars/web/missing.png" || !(current_user.avatar_url.present?)%>
            <img src="/assets/bootstrap/images/user.png" class="media-object" />
          <% else %>
            <img alt="" src="<%= current_user.avatar_url %>" class="thumbnail media-object" style="margin-bottom:0px; height:100px;">
          <% end %>
        </a>
        <div class="media-body event-body">
          <h3 class="subtitle-lined"><%= current_user.first_name rescue nil %> <%= current_user.last_name rescue nil%></h3>
          <small><%= current_user.time_zone %></small>
        </div>
      </div>
      <div id="conversation_item_details">
        <%if @meetings.present? && @next_meeting.present?%>
          <%account = Account.find(@next_meeting.first.account_id)%>
          <%created_by = OpenStruct.new(@next_meeting.first.created_by)%>
          <%=render 'conversation_item_details', citem: @next_meeting.first, account: account, citem_created_by: created_by%>
        <%end%>
      </div>
    </div>
  </div><!-- col-->
  <div class="col-md-8">
    <div class="row">
      <div class="col-sm-6 mb10">
        <% if can? :schedule_filter, Account %>
          <% if (@users.count > 1) %>
            <%= form_tag schedule_calendar_event_path, method: :get, remote: :true do |f| %>
            <div class="col-sm-8 mb10">
              <select class="select2" multiple="multiple" name="users[]" id="schedule_user_list" data-placeholder="Filter schedule by user">
                <%= options_for_select(@users.collect{ |u| ["#{u.first_name} #{u.last_name}", u.id] if current_user.id != u.id }) %>
              </select>
            </div>
            <div class="col-sm-2">
              <button type="submit" class="btn btn-primary" id="show_calendar_eve">Show</button>
            </div>
            <%end%>
          <% end %>
        <% end %>
      </div>
      <div class="col-sm-6">
        <div class="btn-group mr5 pull-right">
          <button data-toggle="dropdown" class="btn btn-primary dropdown-toggle" type="button">
              <i class="fa fa-plus-circle mr5"></i>Add
              <span class="caret"></span>
          </button>
          <ul class="dropdown-menu">
              <li><a href="#" data-toggle="modal" data-target=".account-action-meeting">Schedule Meeting</a></li>
              <li><a href="#" data-toggle="modal" data-target=".conversation-reminder-modal-form">Add Reminder</a></li>
              <li><a href="#" data-toggle="modal" data-target=".conversation-quote-modal-form">Add Quote</a></li>
          </ul>
        </div>
      </div>
    </div><!-- row -->
    <div class="row">
      <div class="col-sm-12">
        <div id="calendar"></div>
      </div>
    </div><!-- row -->
  </div>
  <%if @user_preference['default_calendar_view'].present? %>
     <%@calendar_view = @user_preference['default_calendar_view']%>
  <%else%>
     <%@calendar_view = 'month'%>
  <%end%>
</div>
<%= render "accounts/conversation_meeting", account: nil %>
<%= render "accounts/conversation_quote", account: nil %>
<%= render "accounts/conversation_reminder", account: nil %>

<script>
  $('.select2').select2()
  var new_reminder;
  $(function() {
    new_reminder = $('#new_reminder').wysihtml5({'font-styles': false, 'image': false, 'link':false});
  });

  $(".select_account").change(function(){
    account_id = $(this).val();
    if (account_id != ''){
      $('#preloader').css('opacity', 0.8);
      $('#preloader').show();
      $.ajax({
        type: "GET",
        url: '/schedule/get_notifiable_users?account_id='+account_id,
        success: function (data) {
        }
      });
    }
  });
  $(".conversation-reminder-modal-form .select2").css('width', '100%');

  $(document).on('click', "a.complete_meeting", function(e){
    id = $(this).attr('data-id')
    $('.conversation-complete-meeting-modal-form input[name="conversation_item[id]"]').val($(this).attr('data-id'));
    $('.conversation-complete-meeting-modal-form input[name="id"]').val($(this).attr('data-account-id'));
  });
  var meeting_new_editor

  $(function() {
    meeting_new_editor = $('#meeting_new_editor').wysihtml5({'font-styles': false, 'image': false, 'link':false});
  });

  $(document).ready(function(){

    // Tags Input
    jQuery('#invite-emails').tagsInput({
      width:'100%',
      height: 'auto',
      onAddTag:isValidEmailAddress,
      defaultText:'Invitees'
    });
    function isValidEmailAddress(emailAddress) {
        var pattern = /^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;

        if (pattern.test(emailAddress) == false) {
        alert("Please add a valid email address");
        $('#invite-emails').removeTag(emailAddress);
        }
    };

    $('#meeting-reminder-time').timepicker({minuteStep: 5});

    // by default hide reminder settings for meetings
    $("#meeting-reminder-settings").hide();

    // hide show note reminder settings for meetings
    $('#meeting-reminder').change(function () {
        if ($(this).is(':checked')) {
          $("#meeting-reminder-settings").show(500);
          $("#meeting-reminder-date").attr('required', true);
      }
      else {
        $("#meeting-reminder-settings").hide(500);
        $("#meeting-reminder-date").attr('required', false);
      }
    });
  });

  // Select2
  $("#schedule_user_list").select2({
    width: '100%',
    maximumSelectionLength: 5,
  });

  $("#show_calendar_eve").click(function(){
    $('#preloader').css('opacity', 0.3);
    $('#preloader').show();
  })

  jQuery(document).ready(function() {

    "use strict";
    <%if params[:mid].present? && params[:acc_id].present? %>
      var c_id = '<%=params[:mid]%>';
      var acc_id = '<%=params[:acc_id]%>';
      $.ajax({
        type: "GET",
        url: '/schedule/get_meeting?citem_id='+ c_id + "&account_id=" + acc_id,
        success: function (data) {
        }
      });
    <%end%>
    /* initialize the calendar
     -----------------------------------------------------------------*/
    $('#calendar').fullCalendar({
        header: {
          left: 'prev,next today',
          center: 'title',
          right: 'month,agendaWeek,agendaDay',
        },
        defaultView: '<%=@calendar_view%>',
        eventClick: function (calEvent, jsEvent, view) {
          $('#preloader').css('opacity', 0.3);
          $('#preloader').show();
          var c_id = calEvent.id
          var account_id = calEvent.account_id
          $.ajax({
            type: "GET",
            url: '/schedule/get_meeting?citem_id='+ c_id + "&account_id=" + account_id,
            success: function (data) {
            }
          });
        },
        editable: false,
        droppable: false, // this allows things to be dropped onto the calendar
        events: '/schedule/get_events'
    });
	});

  $("#quote-reminder-settings").hide();
  $("#quote-reminder-settings-edit").hide();

  $(document).on("change","#quote-reminder, #quote-reminder-edit",function() {
    if ($(this).is(':checked')) {
      $("#quote-reminder-settings").show(500);
      $("#quote-reminder-settings-edit").show(500);
      $(".clear_date").attr('required', true);
      $(".clear_time").attr('required', true);
    }
    else {
      $("#quote-reminder-settings").hide(500);
      $("#quote-reminder-settings-edit").hide(500);
      $(".clear_date").attr('required', false);
      $(".clear_time").attr('required', false);
      $(".clear_date").val(null)
    }
  });

  $(document).on("click",".exp_in",function() {
    if($(this).is(':checked')){
      $(".get_date").attr('disabled', false)
      $(".get_date").attr('required', true)
      $(".set_date").attr('disabled', true)
      $(".set_date").attr('required', false)
    }
  })

  $(document).on("click",".exp_after",function() {
    if($(this).is(':checked')){
      $(".set_date").attr('disabled', false)
      $(".set_date").attr('required', true)
      $(".get_date").attr('disabled', true)
      $(".get_date").attr('required', false)
    }
  });

  $(document).on("keypress",".amount_val",function(event) {
      if ((event.which != 46 || $(this).val().indexOf('.') != -1) &&
        ((event.which < 48 || event.which > 57) &&
          (event.which != 0 && event.which != 8))) {
        event.preventDefault();
      }
      var text = $(this).val();
      if ((text.indexOf('.') != -1) &&
        (text.substring(text.indexOf('.')).length > 2) &&
        (event.which != 0 && event.which != 8) &&
        ($(this)[0].selectionStart >= text.length - 2)) {
        event.preventDefault();
      }
  });

  $(document).on("focusout",".amount_val",function() {
     var re = /^-?[0-9]+$/;
     var num = $(this).val();
     if (re.test(num)){
        num = num + '.00';
        $(this).val(num);
     }else if(!re.test(num) && num != '' ){
       var length = parseFloat(num).toFixed(2).replace(/^-?\d*\.?|0+$/g, '').length
       if(length == 1){
        num = num + '0';
        $(this).val(num);
      }else if (length < 1){
        num = parseFloat(num) + '.00';
        $(this).val(num);
      }
    }
  });

  var new_quote
  $(function() {
    new_quote = $('#new_quote').wysihtml5({'font-styles': false, 'image': false, 'link':false});
  });

  var final_date
  function getdate(e) {
    var current_date = new Date();
    current_date.setDate(current_date.getDate() + parseInt(e));
    final_date = ('0' + (current_date.getMonth()+1)).slice(-2) + '/' + ('0' + current_date.getDate()).slice(-2) + '/' + current_date.getFullYear();
  }

  $(document).on("change",".get_date",function() {
    var d = $(this).val()
    getdate(d)
    $(".display_date").val(final_date)
  })

  if(mobile == 'false'){
    $('#reminderDatePicker').datepicker({
      dateFormat: 'mm/dd/yy',
      minDate: 0
    });
  }

   $(document).on("change","#reminderDatePicker, #reminderDatePickerEdit",function() {
    if(mobile == 'false'){
      var select_date = $(this).val()
    }else{
      var select_date = today_date(new Date($(this).val()))
    }
    if(select_date == today_date(new Date)){
      var next_time = new Date();
      next_time.setMinutes(next_time.getMinutes() + 30);
      var c_time = set_time(next_time)
      $("#reminderTimePicker").timepicker("setTime", c_time)
      $("#reminderTimePickerEdit").timepicker("setTime", c_time)
    }
  });

  $('#reminderTimePicker').timepicker({
      showMeridian: true,
      minuteStep: 15,
      showInputs: false,
  }).on('changeTime.timepicker', function(e) {
     if (mobile == 'false'){
        var  date_val = $('#reminderDatePicker').val()
     }else{
        var date_val = today_date(new Date($('#reminderDatePicker').val()))
     }
      if((date_val != '') && (date_val == today_date(new Date))){
        set_reminder_time(e)
      }
  });

  function today_date(date){
    var current_date = date
    var date = current_date.getDate();
    var month = current_date.getMonth()+1;
    var year = current_date.getFullYear();
    if(date<10) {
        date='0'+date
    }
    if(month<10) {
        month='0'+month
    }
    current_date = month+'/'+date+'/'+year;
    return current_date;
  }

  function set_reminder_time(a){
    ConvertTimeformat('24', a.time.value);
    total_minutes = parseInt(sHours)*60 + parseInt(sMinutes);
    var d = new Date();
    var current_t = set_time(d)
    ConvertTimeformat('24', current_t);
    total_current_minutes = parseInt(sHours)*60 + parseInt(sMinutes);

    if((total_minutes) < total_current_minutes+30){
      var display_time = new Date();
      display_time.setMinutes(display_time.getMinutes() + 30);
      var c_time = set_time(display_time)
      $("#reminderTimePicker").timepicker("setTime", c_time);
      $("#reminderTimePickerEdit").timepicker("setTime", c_time);
    }
  }

  function set_time(t){
    var hh = t.getHours();
    var m = t.getMinutes();
    var dd = 'AM';
    var h = hh;
    if (h >= 12) {
        h = hh-12;
        dd = "PM";
    }
    if (h == 0) {
        h = 12;
    }
    m = m<10?"0"+m:m;
    var current_time = h+":"+m+" "+dd;
    return current_time
  }

  function ConvertTimeformat(format, str) {
    var time = str
    var hours = Number(time.match(/^(\d+)/)[1]);
    var minutes = Number(time.match(/:(\d+)/)[1]);
    var AMPM = time.match(/\s(.*)$/)[1];
    if (AMPM == "PM" && hours < 12) hours = hours + 12;
    if (AMPM == "AM" && hours == 12) hours = hours - 12;
      sHours = hours.toString();
      sMinutes = minutes.toString();
    if (hours < 10) sHours = "0" + sHours;
    if (minutes < 10) sMinutes = "0" + sMinutes;
  }
</script>

<style>
  .fc-event-inner {/* force events to be one-line tall */
    white-space: nowrap;
    overflow: hidden;
  }
</style>
